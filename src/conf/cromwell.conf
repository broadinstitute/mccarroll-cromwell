# MIT License
#
# Copyright 2022 Broad Institute
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file is stored in source control here: https://github.com/broadinstitute/mccarroll-cromwell

include required("application")
include required("cromwell-instance")

# Terra reference disks
terra {
    # Retrieve from https://github.com/broadinstitute/firecloud-develop/blob/06e9f949fedb2a448c6777ff8080a6dad3e7b72a/base-configs/cromwell/cromwell-reference-images.conf
    include required("terra-cromwell-reference-images")
}

# McCarroll reference disks
mccarroll {
    reference-disk-localization-manifests = [
        {
            imageIdentifier = "projects/mccarroll-scrna-seq/global/images/x-2021-07-22-mclean-imp-info-0-8-corrected-bcf-cromwell"
            diskSizeGb = 200
            files = [
                {
                    path = "mccarroll_scrnaseq_standard/broad/mccarroll/Melissa2/vcf/McLean_hg38/2021_July_VCF/2021-07-22_mclean.imp.info_0.8_CORRECTED.bcf"
                    crc32c = 1222966997
                }
                {
                    path = "mccarroll_scrnaseq_standard/broad/mccarroll/Melissa2/vcf/McLean_hg38/2021_July_VCF/2021-07-22_mclean.imp.info_0.8_CORRECTED.bcf.idx"
                    crc32c = 3682878594
                }
            ]
        }
    ]
}

workflow-options {
    workflow-failure-mode = "ContinueWhilePossible"
    encrypted-fields = ["user_service_account_json"]
}

backend {
    default = "Papi"

    providers {
        Local.config.filesystems.gcs.auth = "system-account"
        Papi {
            actor-factory = "cromwell.backend.google.pipelines.v2beta.PipelinesApiLifecycleActorFactory"
            config {
                project = "should be specified in workflow options"
                root = "should be specified in workflow options"
                maximum-polling-interval = 180
                slow-job-warning-time = 8 hours

                genomics {
                    auth = "user-service-account"
                    endpoint-url = "https://lifesciences.googleapis.com/"
                    location = "us-central1"
                }

                virtual-private-cloud {
                    network-name = "broad-allow"
                }

                default-runtime-attributes {
                    zones = "us-central1-a us-central1-b us-central1-c us-central1-f"
                }

                filesystems {
                    gcs.auth = "user-service-account"
                    http.enabled = true
                }

                # Concatenate the reference disks into a single value
                reference-disk-localization-manifests = ${terra.reference-disk-localization-manifests} ${mccarroll.reference-disk-localization-manifests}

                # Validate reference disk manifests using an account that has access to all the GCS buckets
                reference-disk-localization.validation.auth = "system-account"
            }
        }
        Uger {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
            config {

                root = "/broad/hptmp/"${USER}"/cromwell-executions"

                # Limits the number of concurrent jobs
                concurrent-job-limit = 100

                runtime-attributes = """
                String docker
                Int cpu = 1
                Float memory_mb = 2048.0
                String? uger_queue
                String? uger_project
                String dol= "$"
                String quo="'"
                String bro="{"
                String brc="}"
                """

                # This is getting tricky to avoid issues with UGER parsing the command line.
                # May be almost time to write to a submit.uger and then run that instead of trying
                # to fit everything on the command line.
                #
                # For example run_singularity.sh's -l argument cannot have spaces in it or qsub
                # will still parse the supplied value as multiple arguments.
                submit-docker = """
                set -euo pipefail

                /broad/mccarroll/software/cromwell/bin/submit_uger.sh \
                -terse \
                -V \
                -b y \
                -N ${job_name} \
                -wd ${cwd} \
                -o ${out} \
                -e ${err} \
                -R y \
                -l h_rt=168:00:00 \
                -pe smp ${cpu} \
                -binding linear:${cpu} \
                ${"-l h_vmem=" + round(ceil(memory_mb / cpu)) + "m"} \
                ${"-q " + uger_queue} \
                ${"-P " + uger_project} \
                /broad/mccarroll/software/cromwell/bin/run_singularity.sh \
                -l ${quo}UGER_JOB_ID=${dol}${bro}JOB_ID${brc}${quo} \
                -r -b ${cwd}:${docker_cwd} ${docker} ${job_shell} ${docker_script}
                """

                kill-docker = "qdel ${job_id}"
                check-alive = "/broad/mccarroll/software/cromwell/bin/check_uger.sh ${job_id}"
                exit-code-timeout-seconds = 180
                job-id-regex = "(\\d+)"

                filesystems {
                    local {
                        caching.duplication-strategy = ["hard-link", "copy"]
                        localization = ["soft-link", "copy"]
                        docker.allow-soft-links: true
                    }
                }

                hashing-strategy: "xxh64"

                # Not in cromwell develop yet: Option 1 per-backend GCR/GAR auth
                docker.google.auth = "system-account"
            }
        }
    }
}

# Not in cromwell develop yet: Option 2 global GCR/GAR auth
docker.hash-lookup.google.auth = "system-account"

call-caching.enabled = true

engine {
    filesystems {
        # Use the system account so that:
        #   - When we run on Uger we don't have to pass a user_service_account_json
        #   - When we run on Papi then engine functions still work
        gcs.auth = "system-account"
        http.enabled = true
    }
}

system {
    new-workflow-poll-rate = 1
    # These are the reference.conf defaults as of Sept 2022
    memory-retry-error-keys = ["OutOfMemory", "Killed"]
    # This is 1,000 times the default in broadinstitute/cromwell#6909. The size should be big
    # enough for most stderr files but still small enough for cromwell to handle.
    memory-retry-stderr-limit = 128000000
}

# Only listen on localhost allowing a separate proccess running on the same server to perform HTTPS termination.
webservice.interface = localhost
